$schema: 'https://moonrepo.dev/schemas/global-project.json'

# OPTIONAL: File groups are a mechanism for grouping similar types of files within a project
# using file glob patterns. These groups are then used by tasks to calculate functionality like
# cache computation, affected files since last change, command line arguments, deterministic
# builds, and more.
#
# This setting requires a map, where the key is the file group name, and the value is a list of
# globs. Globs are relative to a project, even though they are defined globally. This enables
# enforcement of organizational patterns across all projects in the workspace.
fileGroups:
  # List of configuration files located within the project root.
  configs:
    - '*.{js,json,yml,yaml}'

  # List of non-test JavaScript/TypeScript source files.
  # This may include runtime, published, or distributable files.
  sources:
    - 'src/**/*'
    - 'types/**/*'

  # List of non-source JavaScript/TypeScript test files.
  # This may include unit tests, E2E tests, stories, etc.
  tests:
    - 'tests/**/*.test.*'
    - '**/__tests__/**/*'

  # All static assets within the project.
  # This may include styles, images, videos, etc.
  assets:
    - 'assets/**/*'
    - 'images/**/*'
    - 'static/**/*'
    - '**/*.{scss,css}'
    - '**/*.{md,mdx}'

# OPTIONAL: A task is an action that is ran within the context of a project, and wraps
# around an npm or system command. Tasks that are defined here and inherited by all projects
# within the workspace, but can be overridden per project.
#
# This setting requires a map, where the key is a unique name for the task,
# and the value is an object of task parameters.
tasks:
  buildPackage:
    command: 'packemon'
    args:
      - 'pack'
      - '--addEngines'
      - '--addExports'
      - '--declaration'
      - '--declarationConfig'
      - 'tsconfig.build.json'
    inputs:
      - '@globs(sources)'
      - 'package.json'
      - 'tsconfig.build.json'
    outputs:
      - 'dts'
    env:
      NODE_ENV: 'production'

  format:
    command: 'prettier'
    args:
      - '--config'
      - '@in(5)'
      - '--ignore-path'
      - '@in(4)'
      - '--check'
      - '.'
    inputs:
      - '@globs(sources)'
      - '@globs(tests)'
      - '@globs(configs)'
      - '**/*.{md,mdx}'
      - '/.prettierignore'
      - '/prettier.config.js'

  # https://moonrepo.dev/docs/guides/examples/eslint
  lint:
    command: 'eslint'
    args:
      - '--ext'
      - '.ts,.tsx,.cts,.mts,.js,.jsx,.cjs,.mjs'
      - '--fix'
      - '--report-unused-disable-directives'
      - '--no-error-on-unmatched-pattern'
      - '--exit-on-fatal-error'
      - '--ignore-path'
      - '@in(5)'
      - '.'
    inputs:
      - '@globs(sources)'
      - '@globs(tests)'
      - '*.config.*'
      - '.eslintrc'
      - '.eslintrc.*'
      - '/.eslintignore'
      - '/.eslintrc'
      - '/.eslintrc.*'
      - 'tsconfig.json'
      - '/tsconfig.eslint.json'
      - '/tsconfig.options.json'

  # https://moonrepo.dev/docs/guides/examples/jest
  test:
    command: 'jest'
    args:
      - '--passWithNoTests'
      - '--preset'
      - 'jest-preset-beemo'
    inputs:
      - '@globs(sources)'
      - '@globs(tests)'
      - 'jest.config.*'

  # https://moonrepo.dev/docs/guides/examples/typescript
  typecheck:
    command: 'tsc'
    args:
      - '--build'
      - '--verbose'
    inputs:
      - '@globs(sources)'
      - '@globs(tests)'
      - 'tsconfig.json'
      - 'tsconfig.*.json'
      - '/tsconfig.options.json'
